# -*- coding: utf-8 -*-
"""water-jug.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DAVPBD1o-5Fjp1yOcqZKb4XwWDrMhoSr
"""

from collections import defaultdict
import math
jug1=int(input("Enter maximum capacity of jug1:"))
jug2=int(input("Enter maximum capacity of jug2:"))
aim=int(input("Enter amount of water to be measured:"))
visited = defaultdict(lambda: False)

def waterJugSolver(amt1, amt2): 
    global nsteps
    if (amt1 == aim and amt2 == 0) or (amt2 == aim and amt1 == 0):
        print(amt1, amt2)
        nsteps+=1
        return True
    visited[(0,0)]=True
    if visited[(amt1, amt2)] == False:
        print(amt1, amt2)
        nsteps+=1
        visited[(amt1, amt2)] = True

        visited[(jug1,jug2)]= True
        if amt2==0:
          visited[(0,jug2)]= True
        else:
          visited[(jug1,0)]= True      
        return (waterJugSolver(0, amt2) or
                waterJugSolver(amt1, 0) or
                waterJugSolver(jug1, amt2) or
                waterJugSolver(amt1, jug2) or
                waterJugSolver(amt1 + min(amt2, (jug1-amt1)), amt2 - min(amt2, (jug1-amt1))) or
                waterJugSolver(amt1 - min(amt1, (jug2-amt2)), amt2 + min(amt1, (jug2-amt2))))
  
    else:
      return False

if (aim%(math.gcd(jug1,jug2)) is not 0):
    print("no solution")
else:
    print("Steps: ")
    nsteps=0  
    print("solution1")
    waterJugSolver(0, jug2)
    print(f"solution 1 has {nsteps} steps \n")
    nsteps1=nsteps
    nsteps=0
    visited = defaultdict(lambda: False)
    print("solution2")
    waterJugSolver(jug1,0)
    print(f"solution 2 has {nsteps} steps\n")
    nsteps2=nsteps
    if nsteps1 < nsteps2:
        print("solution1 is optimal")
    else:
        print("solution2 is optimal")